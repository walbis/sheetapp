# Generated by Django 4.2.x on YYYY-MM-DD HH:MM (Replace with actual timestamp)
# This is a simulated initial migration based on the provided models.
# It's highly recommended to run `python manage.py makemigrations app` instead of using this directly.

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True # Indicates this is the first migration for the 'app' application

    # Define dependencies. Since this likely depends on Django's built-in auth app's
    # initial migration (to define the base User group/permission models), we add it.
    # It also depends on the custom user model being set *before* running makemigrations.
    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'), # Standard Django auth migration dependency
    ]

    operations = [
        # 1. Create the Custom User model first, as other models depend on it.
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                # Custom fields from app.models.user.User
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                # Standard ManyToManyFields for groups and permissions
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                # AbstractUser doesn't set 'abstract': True here, the concrete model does
            },
            # UserManager defined in the model handles object creation
            # managers=[
            #     ('objects', app.models.user.UserManager()), # If manager needed directly in migration
            # ],
        ),
        # 2. Create Page model (depends on User)
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Page Name')),
                ('slug', models.SlugField(blank=True, db_index=True, help_text='Unique identifier for URL (leave blank to auto-generate from name)', max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_pages', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Page',
                'verbose_name_plural': 'Pages',
                'ordering': ['-updated_at', '-created_at'],
            },
        ),
        # 3. Create Row model (depends on Page)
        migrations.CreateModel(
            name='Row',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='Row Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rows', to='app.page', verbose_name='Page')),
            ],
            options={
                'verbose_name': 'Row',
                'verbose_name_plural': 'Rows',
                'ordering': ['order'],
                'unique_together': {('page', 'order')},
            },
        ),
        # 4. Create Group model (depends on User for owner)
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Group Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_groups', to=settings.AUTH_USER_MODEL, verbose_name='Group Owner')),
                # Members ManyToMany defined via UserGroupMembership below
            ],
            options={
                'verbose_name': 'User Group',
                'verbose_name_plural': 'User Groups',
                'ordering': ['name'],
            },
        ),
        # 5. Create UserGroupMembership intermediate model (depends on User, Group)
        migrations.CreateModel(
            name='UserGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date Joined')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Group Membership',
                'verbose_name_plural': 'User Group Memberships',
                'ordering': ['group__name', 'user__email'],
                'unique_together': {('user', 'group')},
            },
        ),
        # 6. Add members field to Group using the 'through' model
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='member_of_groups', through='app.UserGroupMembership', to=settings.AUTH_USER_MODEL, verbose_name='Members'),
        ),
        # 7. Create PagePermission model (depends on User, Group, Page)
        migrations.CreateModel(
            name='PagePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('VIEW', 'View'), ('EDIT', 'Edit'), ('MANAGE', 'Manage Permissions')], max_length=10, verbose_name='Permission Level')),
                ('target_type', models.CharField(choices=[('PUBLIC', 'Public'), ('USER', 'Specific User'), ('GROUP', 'Specific Group')], max_length=10, verbose_name='Target Type')),
                ('granted_at', models.DateTimeField(auto_now_add=True, verbose_name='Granted At')),
                ('granted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_permissions', to=settings.AUTH_USER_MODEL, verbose_name='Granted By')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='app.page', verbose_name='Page')),
                ('target_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='page_permissions', to='app.group', verbose_name='Target Group')),
                ('target_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='page_permissions', to=settings.AUTH_USER_MODEL, verbose_name='Target User')),
            ],
            options={
                'verbose_name': 'Page Permission',
                'verbose_name_plural': 'Page Permissions',
                'ordering': ['page__name', 'level'],
                'unique_together': {('page', 'level', 'target_type', 'target_user', 'target_group')},
                # Add CheckConstraints if defined in model Meta and DB supports them
                # 'constraints': [ ... ]
            },
        ),
         # 8. Create Column model (depends on Page)
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Column Name')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='Display Order')),
                ('width', models.PositiveIntegerField(default=150, verbose_name='Column Width (px)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='columns', to='app.page', verbose_name='Page')),
            ],
            options={
                'verbose_name': 'Column',
                'verbose_name_plural': 'Columns',
                'ordering': ['order'],
                'unique_together': {('page', 'order')},
            },
        ),
         # 9. Create Cell model (depends on Row, Column)
        migrations.CreateModel(
            name='Cell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, default='', verbose_name='Cell Value')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('column', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cells', to='app.column', verbose_name='Column')),
                ('row', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cells', to='app.row', verbose_name='Row')),
            ],
            options={
                'verbose_name': 'Cell',
                'verbose_name_plural': 'Cells',
                'ordering': ['row__order', 'column__order'],
                'unique_together': {('row', 'column')},
                'indexes': [models.Index(fields=['row', 'column'], name='app_cell_row_id_906879_idx')],
            },
        ),
        # 10. Create Version model (depends on Page, User)
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Timestamp')),
                ('data_snapshot', models.JSONField(verbose_name='Data Snapshot')),
                ('commit_message', models.TextField(blank=True, verbose_name='Commit Message (Optional)')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='app.page', verbose_name='Page')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='page_versions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Page Version',
                'verbose_name_plural': 'Page Versions',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['page', '-timestamp'], name='app_version_page_id_4807b7_idx')],
            },
        ),
         # 11. Create Todo model (depends on Page, User)
        migrations.CreateModel(
            name='Todo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='ToDo Name')),
                ('slug', models.SlugField(blank=True, db_index=True, help_text='Unique identifier for URL within the source page context (auto-generated)', max_length=255)),
                ('is_personal', models.BooleanField(default=True, help_text='If true, only the creator (and admins) can view/edit this specific ToDo list.', verbose_name='Personal ToDo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_todos', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('source_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='todos', to='app.page', verbose_name='Source Page')),
            ],
            options={
                'verbose_name': 'ToDo List',
                'verbose_name_plural': 'ToDo Lists',
                'ordering': ['-created_at'],
                'unique_together': {('source_page', 'slug')},
            },
        ),
         # 12. Create TodoStatus model (depends on Todo, Row)
        migrations.CreateModel(
            name='TodoStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Not Started'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed')], db_index=True, default='NOT_STARTED', max_length=20, verbose_name='Status')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('row', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='todo_statuses', to='app.row', verbose_name='Source Row')),
                ('todo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='app.todo', verbose_name='ToDo List')),
            ],
            options={
                'verbose_name': 'ToDo Status',
                'verbose_name_plural': 'ToDo Statuses',
                'ordering': ['row__order'],
                'unique_together': {('todo', 'row')},
                'indexes': [models.Index(fields=['todo', 'row'], name='app_todosta_todo_id_0e2886_idx')],
            },
        ),
        # Add CheckConstraint for PagePermission if defined in model Meta
        # migrations.AddConstraint(
        #     model_name='pagepermission',
        #     constraint=models.CheckConstraint(check=models.Q(('target_type', 'USER'), ('target_user__isnull', False), ('target_group__isnull', True)) | models.Q(('target_type', 'GROUP'), ('target_user__isnull', True), ('target_group__isnull', False)) | models.Q(('target_type', 'PUBLIC'), ('target_user__isnull', True), ('target_group__isnull', True)), name='permission_target_consistency'),
        # ),
        # migrations.AddConstraint(
        #     model_name='pagepermission',
        #     constraint=models.CheckConstraint(check=models.Q(('target_type', 'PUBLIC'), ('level', 'VIEW')) | ~models.Q(('target_type', 'PUBLIC')), name='public_permission_level'),
        # ),
    ]

# --- Stage 1: Build Stage ---
# Use an official Node.js runtime as the base image for building the React app.
FROM node:18-alpine as builder

# Set the working directory inside the container
WORKDIR /app

# Copy package.json AND package-lock.json (if it exists) first
# This leverages Docker layer caching.
COPY package*.json ./

# Install dependencies using npm install.
# It will use package-lock.json if present for reproducibility.
# Use --legacy-peer-deps if needed for compatibility.
RUN npm install --legacy-peer-deps

# Copy the entire frontend application source code into the container
COPY . .

# Build the React application for production.
RUN npm run build


# --- Stage 2: Production Stage ---
# Use a small Nginx image to serve the static build.
FROM nginx:1.23-alpine

# Copy the static build output from the 'builder' stage to Nginx's default web root directory.
COPY --from=builder /app/build /usr/share/nginx/html

# Copy custom Nginx configuration file (if needed)
# COPY nginx.conf /etc/nginx/conf.d/default.conf # Uncomment if using custom Nginx config

# Expose the default Nginx port
EXPOSE 80

# Default command to start Nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]
